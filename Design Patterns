The Singleton design pattern is a creational design pattern that ensures a class has only one instance and provides a global point of access to that instance. It is commonly used in situations where you need to control access to a single resource, manage a shared resource, or maintain a single point of control like a configuration manager, database connection pool, or a logging service.


import java.io.Serializable;

public class Singleton implements Serializable {
    // Private volatile static instance variable
    private static volatile Singleton instance;

    // Private constructor to prevent instantiation from other classes
    private Singleton() {
        // Ensure that reflection cannot create a new instance
        if (instance != null) {
            throw new RuntimeException("Use getInstance() method to get the singleton instance.");
        }
    }

    // Public static method to get the instance with double-checked locking
    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }

    // Implement readResolve method to maintain singleton during deserialization
    protected Object readResolve() {
        return getInstance();
    }

    // Other methods and fields (if any)
    public void doSomething() {
        System.out.println("Singleton is doing something.");
    }
}





The Factory design pattern is a creational pattern that provides an interface for creating objects but allows subclasses to alter the type of objects that will be created. It promotes loose coupling by abstracting the process of object creation, making it easier to change or extend the types of objects created without modifying the client code that uses them.

Advantages:

Separation of Concerns: It separates the responsibility of creating objects from the client code that uses them.

Interface Document
{
	void open()
	void save()

}

class PDF implements Document
{
	
	// open

	//save
}

class Word implements Document
{
	
	// open

	//save
}

enum DocumentType
{
	PDF,WORD;
}


Interface DocumentFactory
{
	Document create(DocumentType type)
}

class DocumentFactory implements DocumentFactory
{
	

   Document create(DocumentType type)
   {
     
     switch(type)
     {

     case WORD:
     return new Word();

     case PDF:
     retrun new PDF();

     default:
     throw new IllegalArgument("Unsupported Document Type"); 



     }




   }


}



The Builder design pattern is a creational pattern used to construct complex objects step by step. It provides a way to create an object with many optional parameters and configurations while keeping the object immutable. This pattern is particularly useful when an object has a large number of constructor parameters, some of which are optional.



Class Computer
{
	String name;
	String manufacturer;
	Double price;
	Date YOM;
	String cpu;
	String memory;
	String HD;


	private Computer(Builder builder)
	{
 

     this.name=builder.name;
     this.price=builder.price;
     this.manufacturer=builder.manufacturer;
     this.YOM=builder.YOM;
     this.cpu=builder.cpu;
     this.memory=builder.memory;
     this.HD=builder.HD;


	}



public static class Builder
{
	
	String name;
	String manufacturer;
	Double price;
	Date YOM;
	String cpu;
	String memory;
	String HD;


Builder(String name)
{
	this. name=name;
}


public Builder manufacturer(String manufacturer)
{
	this.manufacturer=manufacturer;
}
/// rest of the methods


public Computer build()
{
	

	return new Computer(this);
}



}


} // end of computer class


Structural design patterns in software engineering are used to solve design problems related to the composition, relationships, and organization of classes and objects within a software system. 

Adapter is a structural design pattern that allows objects with incompatible interfaces to collaborate.

Interface XMLSystem
{
	
	public void processMessage(String XML);
}

Interface JsonSystem
{
	public void processMessage(String JSON);

}

Class XMLAdapter implements JSONSystem
{
	XMLSystem xmlsystem;

XMLAdapter(XMLSystem xmlsystem)
{
	xmlsystem=xmlsystem;
}

 public void processMessage(String json)
 {

   xml= convertjsontoxml logic  

   xmsystem.processMessage(xml);

 }

}



The Decorator pattern is a structural design pattern that allows you to add behavior or responsibilities to objects dynamically, without altering their original class. It is used to extend the functionality of objects in a flexible and reusable way.

Interface Logger
{
	
	public void log(String message);

}

class Basiclogger implements Logger
{
	Logger logger;
	public void log(String message)
	{

     System.out.println("message "+message);

	}
}

class TimeStamplogger implements Logger
{
	Logger logger;
	public void log(String message)
	{

    private SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
     String timestampedMessage = "[" + dateFormat.format(new Date()) + "] " + message;

     logger.log(timestampedmessage+message);


	}
}


The Observer design pattern is a behavioral pattern that defines a one-to-many dependency between objects. In this pattern, when one object (the subject) changes its state, all its dependents (observers) are notified and updated automatically.


import java.util.ArrayList;
import java.util.List;

// Subject interface
interface Subject {
    void addObserver(Observer observer);
    void removeObserver(Observer observer);
    void notifyObservers();
}

// Concrete subject
class WeatherStation implements Subject {
    private int temperature;
    private List<Observer> observers = new ArrayList<>();

    public int getTemperature() {
        return temperature;
    }

    public void setTemperature(int temperature) {
        this.temperature = temperature;
        notifyObservers();
    }

    @Override
    public void addObserver(Observer observer) {
        observers.add(observer);
    }

    @Override
    public void removeObserver(Observer observer) {
        observers.remove(observer);
    }

    @Override
    public void notifyObservers() {
        for (Observer observer : observers) {
            observer.update(temperature);
        }
    }
}

// Observer interface
interface Observer {
    void update(int temperature);
}

// Concrete observer
class TemperatureDisplay implements Observer {
    private int temperature;

    @Override
    public void update(int temperature) {
        this.temperature = temperature;
        display();
    }

    public void display() {
        System.out.println("Temperature Display: " + temperature + "°C");
    }
}

// Concrete observer
class PhoneApp implements Observer {
    private int temperature;

    @Override
    public void update(int temperature) {
        this.temperature = temperature;
        display();
    }

    public void display() {
        System.out.println("Phone App: The current temperature is " + temperature + "°C");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create the subject (WeatherStation)
        WeatherStation weatherStation = new WeatherStation();

        // Create observers (TemperatureDisplay and PhoneApp)
        TemperatureDisplay temperatureDisplay = new TemperatureDisplay();
        PhoneApp phoneApp = new PhoneApp();

        // Register observers with the subject
        weatherStation.addObserver(temperatureDisplay);
        weatherStation.addObserver(phoneApp);

        // Simulate a change in temperature
        weatherStation.setTemperature(25);
        weatherStation.setTemperature(30);
    }
}


The Strategy Pattern is a behavioral design pattern that defines a family of algorithms, encapsulates each one of them, and makes them interchangeable. It allows a client to choose an algorithm from a family of algorithms at runtime, without altering the code that uses the algorithm. 


// Strategy interface
interface PaymentStrategy {
    void pay(int amount);
}

// Concrete strategy 1
class CreditCardPayment implements PaymentStrategy {
    private String cardNumber;
    private String name;

    public CreditCardPayment(String cardNumber, String name) {
        this.cardNumber = cardNumber;
        this.name = name;
    }

    @Override
    public void pay(int amount) {
        System.out.println("Paid $" + amount + " with Credit Card (Card Number: " + cardNumber + ", Name: " + name + ")");
    }
}

// Concrete strategy 2
class PayPalPayment implements PaymentStrategy {
    private String email;

    public PayPalPayment(String email) {
        this.email = email;
    }

    @Override
    public void pay(int amount) {
        System.out.println("Paid $" + amount + " with PayPal (Email: " + email + ")");
    }
}

// Context (shopping cart)
class ShoppingCart {
    private PaymentStrategy paymentStrategy;

    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    public void checkout(int totalAmount) {
        paymentStrategy.pay(totalAmount);
    }
}

public class Main {
    public static void main(String[] args) {
        // Create a shopping cart
        ShoppingCart cart = new ShoppingCart();

        // Choose a payment strategy (Credit Card)
        PaymentStrategy creditCardPayment = new CreditCardPayment("1234-5678-9876-5432", "John Doe");
        cart.setPaymentStrategy(creditCardPayment);

        // Checkout with the chosen payment strategy
        cart.checkout(100);

        // Choose a different payment strategy (PayPal)
        PaymentStrategy paypalPayment = new PayPalPayment("johndoe@example.com");
        cart.setPaymentStrategy(paypalPayment);

        // Checkout again with the new payment strategy
        cart.checkout(50);
    }
}


